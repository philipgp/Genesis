Define ObjectType KeyBoard
int8 CurKey;
int8 m_bShiftPressed;
int8 m_bLftShiftPressed,m_bRytShiftPressed;
int8 m_bCapsLock;
int8 m_iScanCode[255];
Function init()
{
m_bShiftPressed=0;
m_bCapsLock=0;
_asm{
mov EAX,&m_iScanCode
mov EDI,EAX
inc EAX
inc EAX
mov byte [EAX],'1'
inc EAX
mov byte [EAX],'2'
inc EAX
mov byte [EAX],'3'
inc EAX
mov byte [EAX],'4'
inc EAX
mov byte [EAX],'5'
inc EAX
mov byte [EAX],'6'
inc EAX
mov byte [EAX],'7'
inc EAX
mov byte [EAX],'8'
inc EAX
mov byte [EAX],'9'
inc EAX
mov byte [EAX],'0'
inc EAX
mov byte [EAX],'-'
inc EAX
mov byte [EAX],'='
add EAX,3
mov byte [EAX],'q'
inc EAX
mov byte [EAX],'w'
inc EAX
mov byte [EAX],'e'
inc EAX
mov byte [EAX],'r'
inc EAX
mov byte [EAX],'t'
inc EAX
mov byte [EAX],'y'
inc EAX
mov byte [EAX],'u'
inc EAX
mov byte [EAX],'i'
inc EAX
mov byte [EAX],'o'
inc EAX
mov byte [EAX],'p'
inc EAX
mov byte [EAX],'['
inc EAX
mov byte [EAX],']'
add EAX,3
mov byte [EAX],'a'
inc EAX
mov byte [EAX],'s'
inc EAX
mov byte [EAX],'d'
inc EAX
mov byte [EAX],'f'
inc EAX
mov byte [EAX],'g'
inc EAX
mov byte [EAX],'h'
inc EAX
mov byte [EAX],'j'
inc EAX
mov byte [EAX],'k'
inc EAX
mov byte [EAX],'l'
inc EAX
mov byte [EAX],';'
inc EAX
mov byte [EAX],"'"
inc EAX
mov byte [EAX],'`'
inc EAX
inc EAX
mov byte [EAX],'\'
inc EAX
mov byte [EAX],'z'
inc EAX
mov byte [EAX],'x'
inc EAX
mov byte [EAX],'c'
inc EAX
mov byte [EAX],'v'
inc EAX
mov byte [EAX],'b'
inc EAX
mov byte [EAX],'n'
inc EAX
mov byte [EAX],'m'
inc EAX
mov byte [EAX],','
inc EAX
mov byte [EAX],'.'
inc EAX
mov byte [EAX],'/'
inc EAX
inc EAX
mov byte [EAX],'*'
inc EAX
inc EAX
mov byte [EAX],' '
}
m_bShiftPressed=0;
}
Interrupt HandleInput()
{
uint8 CurScanCode;
int8 m;
int8 bCapitalizeChar,bChar;
int8 j;
j=35;
bChar=0;
bCapitalizeChar=m_bCapsLock;
%LockRegister(EAX);
_asm{
spin:
in  al, 0x64
and al, 0x01
jz  spin
in al,0x60
mov byte @CurScanCode,al
}
%UnLockRegister(EAX);
if (CurScanCode==42)  Then
 m_bShiftPressed=1;
Elseif(CurScanCode==170) Then
 m_bShiftPressed=0;
 elseif(CurScanCode==58) Then
 m_bCapsLock=1-m_bCapsLock;
else
CurKey=m_iScanCode[CurScanCode];
if(m_bShiftPressed==1) Then
 if(CurScanCode==2) then
  CurKey=33;
 Elseif (CurScanCode==3) then
  CurKey=64;
  Elseif (CurScanCode==4) then
  CurKey=35;
  Elseif (CurScanCode==5) then
  CurKey=36;
  Elseif (CurScanCode==6) then
  CurKey=37;
  Elseif (CurScanCode==7) then
  CurKey=94;
  Elseif (CurScanCode==8) then
  CurKey=38;
  Elseif (CurScanCode==9) then
  CurKey=42;
  Elseif (CurScanCode==10) then
  CurKey=40;
  Elseif (CurScanCode==11) then
  CurKey=41;
  Elseif (CurScanCode==12) then
  CurKey=95;
  Elseif (CurScanCode==13) then
  CurKey=43;
  Elseif (CurScanCode==26) then
  CurKey=123;
  Elseif (CurScanCode==27) then
  CurKey=125;
  Elseif (CurScanCode==43) then
  CurKey=124;
  Elseif (CurScanCode==39) then
  CurKey=58;
  Elseif (CurScanCode==40) then
  CurKey=34;
  Elseif (CurScanCode==41) then
  CurKey=126;
  Elseif (CurScanCode==51) then
  CurKey=60;
  Elseif (CurScanCode==52) then
  CurKey=62;
  Elseif (CurScanCode==53) then
  CurKey=63;
  Else
   bCapitalizeChar=1-bCapitalizeChar;
 EndIf
 
EndIf
m=2;
if((CurKey>96) &&(CurKey<123)) Then
 bChar=1;
 EndIf
	if((bCapitalizeChar==1) && (bChar==1)) Then
     CurKey=CurKey-32; 
   EndIf
m=4;
if(CurScanCode<127) Then
print_ascii_os(CurKey);
EndIf

EndIf
m=2;
_asm{
mov al, 0x20
out 0x20, al
}
}
Function start()
{
int8 h;
init();
_asm{
cli
mov word[es:(9*4)], KeyBoard_HandleInput
mov word[es:(9*4)+2], 0
sti
jmp $
}
h=67;
}
EndDefine
