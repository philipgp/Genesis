  /*
  extern char * GetSymbolName(int);
  char * GetOperatorName(int);
  Optab * MakeSimpleNode();
  Optab* GenerateTempVariable();
  void SetDataType(int,int);
  Optab * GetDimension(int);
  void SetDimension(int,Optab *);
  void SetStorage(int,int);
  int AddSymbol(char SYMBOL[LEN]);
  int GetDataType(int SymTabPos);
  void SetDataType(int SymTabPos,int Datatype);
  int CalculateDataTypeSize(Optab *LpMembers);
  int DataTypeIsStruct(int iDataType);
int GetOperatorId(char OPERATOR[LEN]);
int AddFunctionTable(int RtrnType,char *FuncName,Optab * Parameters);
void AddDataType(char * LpszDataTypeName,int iDataTypeSize,Optab *LpMembers);
char * GenerateTempLabel();
Optab *MakeStructDeclaration(int iStructNameID,Optab *Members);
Optab * MakeNode(int data);
void InitNewBlock();
void TermOldBlock();
Optab* MakeDeclareIDSubscript(Optab* Identifier,Optab* Subscript);
int IsPointer(Optab * LpCurrent);
int IsPointer(Optab * LpCurrent);
Optab* MakeDeclareStatement(int Datatype,Optab* ID_List);
Optab* MakeFunctionDeclaration(int RtrnDataType,int FunctionNameSymTabPos,Optab * ParamList,struct Optab *StatementBlock);
Optab * MakeSimpleNode();
Optab * DeleteNode(struct Optab * Node);
void BackPatch(Optab * Current,Optab* PatchAddr);
void BackPatchWhileLoop(Optab * Current,Optab* BreakPatchAddr,Optab * ContinuePatchAddress);
Optab * ConcatSubscriptNode(Optab *Node1,Optab * Node2);
Optab * ConcatNode(Optab *Node1,Optab * Node2);
int GetResult(Optab* BlockStart);
Optab * AddOperation(Optab * RESULT,int OPERATOR,Optab * OPERAND1,Optab * OPERAND2);
Optab *GetLastNodeAddr(Optab *Block_Start);
Optab* MakeElseIf(Optab *Condition ,Optab *Statement);
Optab* MakeElseIfElse(Optab *Condition ,Optab *ElseIfStatement,Optab *ElseStatement);
Optab* MakeIfElseIf(Optab *Condition,Optab *Statement,Optab *IfElseIfStatement);
Optab* MakeElseIfElseIf(Optab *Condition,Optab *IfStatement,Optab* ElseIfStatement);
Optab* MakeAssignment(Optab* LHS ,Optab * RHS);
Optab * MakeWhile(Optab *Condition ,Optab *Statement);
Optab * MakeIfThen(Optab *Condition ,Optab *Statement);
Optab* MakeStatementBlock(Optab * Statement1,Optab * Statement2);
Optab* MakeIfThenElse(Optab* Condition,Optab* TrueStatement,Optab * FalseStatement);
int GetOperatorId(char OPERATOR[LEN]);
Optab * MakeSingleExprSubscript(int Identifier,Optab * CurrentSubscriptExpr);
Optab*  GetCurrentDimension(int Identifier,int count);
Optab * MakeExprSubscript(Optab * PreviousSubscriptExpr,Optab * CurrentSubscriptExpr);
Optab* MakeFunctionCallSingleParam(int FunctionID,Optab* Parameter);
Optab* MakeFunctionCallAddParam(Optab *FirstExpression, Optab * SecondExpression);
Optab * MakeFunctionCallAddFirstParam(Optab *FirstParam);
Optab * MakeFunctionCallMultipleParam(int FunctionID,Optab * Parameters,Optab *LastParameter);
char * GetOperatorName(int OPERATORID)*/